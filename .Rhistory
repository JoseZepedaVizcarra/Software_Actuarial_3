a<-available.packages()
nrow(a)
Este es el primer cambio que se realizó en R
install.packages(markdown)
install.packages(""markdown")
install.packages("markdown")
install.packages("ggplot2")
install.packages("devtools")
a <- installed.packages()
view(a)
view(a)
view (a)
view (a)
view (a)
View (a)
x <- 1
x <- 1
x <- 2
print(X)
print(x)
print(x)#Al poner mayúscula, que no ha sido definida, se marcará error
x
#Al poner mayúscula, que no ha sido definida, se marcará error
print(X)
#Aquí se está realizando una asignación
x <- 1
x <- 2
#La asignación no me permitió visualizar el resultado, para ello debo solicitar una impresión
print(x)
#Al poner mayúscula, que no ha sido definida, se marcará error
print(X)
#La alternativa será solicitar una impresión implícita
x
#Aquí se está realizando una asignación
x <- 1
x <- 2
#La asignación no me permitió visualizar el resultado, para ello debo solicitar una impresión
print(x)
#Al poner mayúscula, que no ha sido definida, se marcará error
print(X)
#La alternativa será solicitar una impresión implícita
x
#La asignación puede hacerse también de textos
msg <- "Hola"
print(msg)
x <- #Expresión Incompleta
x <- #Expresión Incompleta
3
x <- #Expresión Incompleta
x <- #Expresión Incompleta, para salir de ella(dejar de ejecutar)presiona ESC
#Aquí se está realizando una asignación
x <- 1
x <- 2
#La asignación no me permitió visualizar el resultado, para ello debo solicitar una impresión
print(x)
#Al poner mayúscula, que no ha sido definida, se marcará error
print(X)
#La alternativa será solicitar una impresión implícita
x
#La asignación puede hacerse también de textos
msg <- "Hola"
#Al solicitar una impresión , me deberá enseñar el mensaje que estaba guardado
print(msg)
x <- #Expresión Incompleta, para salir de ella(dejar de ejecutar)presiona ESC
#Impresión de un arreglo
x <- 1:20
x
y <- 3:9
y
99:43
z <-99-43
z
#Aquí se está realizando una asignación
x <- 1
x <- 2
#La asignación no me permitió visualizar el resultado, para ello debo solicitar una impresión
print(x)
#Al poner mayúscula, que no ha sido definida, se marcará error
print(X)
#La alternativa será solicitar una impresión implícita
x
#La asignación puede hacerse también de textos
msg <- "Hola"
#Al solicitar una impresión , me deberá enseñar el mensaje que estaba guardado
print(msg)
x <- #Expresión Incompleta, para salir de ella(dejar de ejecutar)presiona ESC
#Impresión de un arreglo
x <- 1:20
x
y <- 3:9
y
z <-99-43
z
#El operador ":" me permite generar secuencias numéricas de un principio a un fin
z <- 99-43
#Aquí se está realizando una asignación
x <- 1
x <- 2
#La asignación no me permitió visualizar el resultado, para ello debo solicitar una impresión
print(x)
#Al poner mayúscula, que no ha sido definida, se marcará error
print(X)
#La alternativa será solicitar una impresión implícita
x
#La asignación puede hacerse también de textos
msg <- "Hola"
#Al solicitar una impresión , me deberá enseñar el mensaje que estaba guardado
print(msg)
x <- #Expresión Incompleta, para salir de ella(dejar de ejecutar)presiona ESC
#Impresión de un arreglo
x <- 1:20
x
y <- 3:9
y
z <- 99-43
z
#El operador ":" me permite generar secuencias numéricas de un principio a un fin
#Aquí se está realizando una asignación
x <- 1
x <- 2
#La asignación no me permitió visualizar el resultado, para ello debo solicitar una impresión
print(x)
#Al poner mayúscula, que no ha sido definida, se marcará error
print(X)
#La alternativa será solicitar una impresión implícita
x
#La asignación puede hacerse también de textos
msg <- "Hola"
#Al solicitar una impresión , me deberá enseñar el mensaje que estaba guardado
print(msg)
x <- #Expresión Incompleta, para salir de ella(dejar de ejecutar)presiona ESC
#Impresión de un arreglo
x <- 1:20
x
y <- 3:9
y
z <- 99:43
z
#El operador ":" me permite generar secuencias numéricas de un principio a un fin
#El operador ":" me permite generar secuencias numéricas de un principio a un fin
w <- 3:14.5
w
x
z
Inf
exp(-inf)
exp(-Inf)
Inf - Inf
Inf + Inf
Inf * Inf
Inf / Inf
0/0
0 * Inf
#Es posible creare un vector con la función c()
x <- c(TRUE,FALSE, TRUE, TRUE, F, F, T)
X
#Es posible crear un vector con la función c()
x <- c(TRUE, FALSE, TRUE, TRUE, F, F, T)
x <- c(TRUE, FALSE, TRUE, TRUE, F, F, T)
x
x <- c(1L, 3L, 5L, -4L)
X
x
x <- c(1,3,3,-4)
x
x <- c(1+i,3+4i,-5-6i,3.14-1.618i)
x <- c(1+i,3+4*i,-5-6*i,3.14-1.618*i)
x <- c(1+1i,3+4*i,-5-6*i,3.14-1.618*i)
x <- c(1+1*i,3+4*i,-5-6*i,3.14-1.618*i)
x <- c(1+1*i, 3+4*i, -5-6*i, 3.14-1.618*i)
x <- c(1+1i, 3+4i, -5-6i, 3.14-1.618i)
x
x <- c("a", "b", "c", "Hola", "Mundo")
X
x
x <- c(1,3,3,-4, 3-141596)
#Otro posible camino sería con la función vector
x <- vector("numeric", lenght=10)
#Otro posible camino sería con la función vector
x <- vector("numeric", lenght=10)
#Otro posible camino sería con la función vector
x <- vector("numeric", length = =10)
#Otro posible camino sería con la función vector
x <- vector("numeric", length =10)
X
x
y <- c(1.7,"a")
x
y
y <- c(TRUE, 2)
y <- c(TRYE, L2)
y <- c(TRuE, L2)
y <- c(TRuE, 2L)
y <- c(TRUE, 2L)
y <- c(FALSE, 2L, 5, 5+4i)
Y
y
as.numeric (x) #Numeric
mtcars
x <- data.frame(mtcars)
dput(x)
dput(x,file="~Github/Software_Actuarial_3/x.R")
carrosJoseZepeda <- dget(file="~Github/Software_Actuarial_3/x.R")
setwd("~/GitHub/Softare_Acturial_3")
setwd("~/GitHub/Sofwtare_Acturial_3")
setwd("~/GitHub/Sofwtare_Actuarial_3")
setwd("~/GitHub/Software_Actuarial_3")
#Extracción de valores faltantes
airquality[1:6]
#Extracción de valores faltantes
airquality[1:6,]
setwd("~/GitHub/Software_Actuarial_3")
#Extracción de valores faltantes
airquality[1:6,]
complete.cases(airquality[1:6,])
completos <- complete.cases(airquality)
completos
airquality[completos,]
airquality[1:6,]
completos <- complete.cases(airquality)
data <- airquality[completos,]
data[1:6,]
#Al ahcer una extraccion desde un vector de logico, obtengo solo los valores que son TRUE
#Algunas operaciones
x <- 1:4; y<- 6:9
x+y
x>2
#Si quiero evaluar la igualdad, le tengo que poner dos iguales
y==8
#La asignación la buscamos con la flecha, no con el igual.
x*y
x/y
x <- matriz(1:4,2,20); y <- rep(10,4,2,2)
x <- matrix(1:4,2,20); y <- matrix(rep(10,4,2,2))
x*y
x*y
x <- matrix(1:4,2,20); y <- matrix(rep(10,4),2,2)
x*y
x <- matrix(1:4,2,20); y <- matrix(rep(10,4),2,2)
x*y
x <- matrix(1:4,2,20); y <- matrix(rep(10,4),2,2)
x*y
x <- matrix(1:4,2,2); y <- matrix(rep(10,4),2,2)
x*y
x/y
x%%y
y%%x
x <- matrix(1:4,2,2); y <- matrix(rep(10,4),2,2)
x*y
x/y
x%%y
y%%x
x <- matrix(1:4,2,2); y <- matrix(rep(10,4),2,2)
x*y
x/y
x%*%y
y%*%x
#Estructura de control if-else
x=3
if (x>5){
"X es mayor a 5"
} else { "X tiene que ser mayor a 5"}
#Estructura de control if-else
x=3
if (x>5){
"X es mayor a 5"
} else { "X tiene que ser mayor a 5"
}
#Estructura de control if-else
x=3
if (x>5){
"X es mayor a 5"
} else { "X tiene que ser mayor a 5"}
if (x>5){"X es mayor a 5"
} else if (x<3) {
"X es menor a 3"
} else {
"x es igual a 3"
}
#Estructura de control if-else
x=3
if (x>5){
"X es mayor a 5"
} else { "X tiene que ser mayor a 5"
}
if (x>5){
"X es mayor a 5"
} else if (x<3) {
"X es menor a 3"
} else {
"x es igual a 3"
}
x=7
if (x<5){
print("Menor a 5")
} else if (x<=10){
print("Entre 5 y 10")
} else {print("Mayor a 10")
}
x=3
if (x>5) {
print("Mayor")
} else {
print("Menor")
}
if (x<3){
y <- 10
} else {
y <- 0
}
if (x<3){
y <- 10
} else {
y <- 0
}
if (x<3){
y <- 10
} else {
y <- 0
}
y <- if (x>3 {
10
}else {
0
}
y <- if (x>3 {
10
} else {
0
}
}
})
x=3
if (x<3){
y <- 10
} else {
y <- 0
}
x=3
y <- if (x>3) {
10
} else {
0
}
x=3
if (x<3){
y <- 10
} else {
y <- 0
}
y
x=3
y <- if (x>3) {
10
} else {
0
}
y
